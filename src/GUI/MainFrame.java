/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Apr 16, 2011, 10:50:04 AM
 */

package GUI;

/**
 *
 * @author benlavery
 */
public class MainFrame extends javax.swing.JFrame {

    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        tabAllTabs = new javax.swing.JTabbedPane();
        tabGamePlay = new javax.swing.JPanel();
        cmbGameStyle = new javax.swing.JComboBox();
        lblGameStyle = new javax.swing.JLabel();
        lblMaxShots = new javax.swing.JLabel();
        chkRicochet = new javax.swing.JCheckBox();
        chkJumping = new javax.swing.JCheckBox();
        chkSpanOnBuilding = new javax.swing.JCheckBox();
        chkDieOnTeamKill = new javax.swing.JCheckBox();
        lblMaxTeamKills = new javax.swing.JLabel();
        chkDisableBots = new javax.swing.JCheckBox();
        lblMaxPlayerScore = new javax.swing.JLabel();
        lblMaxTeamScore = new javax.swing.JLabel();
        lblGameTime = new javax.swing.JLabel();
        chkManuallyStartTimedGame = new javax.swing.JCheckBox();
        chkAutoTeam = new javax.swing.JCheckBox();
        lblMaxPlayers = new javax.swing.JLabel();
        spnMaxShots = new javax.swing.JSpinner();
        spnMaxTeamKills = new javax.swing.JSpinner();
        spnMaxPlayerScore = new javax.swing.JSpinner();
        spnMaxTeamScore = new javax.swing.JSpinner();
        spnGameTime = new javax.swing.JSpinner();
        spnMaxPlayers = new javax.swing.JSpinner();
        lblWorldSize = new javax.swing.JLabel();
        spnWorldSize = new javax.swing.JSpinner();
        lblBuildingDensity = new javax.swing.JLabel();
        spnBuildingDensity = new javax.swing.JSpinner();
        lblMap = new javax.swing.JLabel();
        chkRandomWorld = new javax.swing.JCheckBox();
        cmbMaps = new javax.swing.JComboBox();
        chkRandomHeightBuildings = new javax.swing.JCheckBox();
        chkRandomRotateObjects = new javax.swing.JCheckBox();
        chkAddTeleporters = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        passAdminPassword = new javax.swing.JPasswordField();
        passConfirmAdminPassword = new javax.swing.JPasswordField();
        lblAdminPassword = new javax.swing.JLabel();
        lblConfirmAdminPassword = new javax.swing.JLabel();
        chkAnnounceTKToAdmins = new javax.swing.JCheckBox();
        txtPathToBadWords = new javax.swing.JTextField();
        lblPathToBadWords = new javax.swing.JLabel();
        chkFilterChat = new javax.swing.JCheckBox();
        chkFilterChatSimple = new javax.swing.JCheckBox();
        chkFilterCallSigns = new javax.swing.JCheckBox();
        tabServer = new javax.swing.JPanel();
        chkQuiteAfterOneGame = new javax.swing.JCheckBox();
        txtPublicMessage = new javax.swing.JTextField();
        lblPublicMessage = new javax.swing.JLabel();
        lblPublicAddress = new javax.swing.JLabel();
        txtPublicAddress = new javax.swing.JTextField();
        txtListeningPort = new javax.swing.JTextField();
        lblListeningPort = new javax.swing.JLabel();
        chkMakeServerPrivate = new javax.swing.JCheckBox();
        lblListeningAddress = new javax.swing.JLabel();
        txtListeningAddress = new javax.swing.JTextField();
        chkRequireUDP = new javax.swing.JCheckBox();
        txtPathToPasswordDatabase = new javax.swing.JTextField();
        lblPathToPasswordDatabase = new javax.swing.JLabel();
        txtPathToUserDatabase = new javax.swing.JTextField();
        lblPathToUserDatabase = new javax.swing.JLabel();
        txtPathToGroupDatabase = new javax.swing.JTextField();
        lblPathToGroupDatabase = new javax.swing.JLabel();
        lblRegisteredGroupName = new javax.swing.JLabel();
        txtRegisteredGroupName = new javax.swing.JTextField();
        spnMaxIdleTime = new javax.swing.JSpinner();
        lblMaxIdleTime = new javax.swing.JLabel();
        lblAdminAnnounceLag = new javax.swing.JLabel();
        spnAdminAnnounceLag = new javax.swing.JSpinner();
        spnAnnounceLag = new javax.swing.JSpinner();
        lblAnnounceLag = new javax.swing.JLabel();
        lblAnnounceLag1 = new javax.swing.JLabel();
        spnAnnounceLag1 = new javax.swing.JSpinner();
        lblPathToBanFile = new javax.swing.JLabel();
        txtPathToBanFile = new javax.swing.JTextField();
        txtBanAddresses = new javax.swing.JTextField();
        lblBanAddresses = new javax.swing.JLabel();
        lblPathToPIDFile = new javax.swing.JLabel();
        txtPathToPIDFile = new javax.swing.JTextField();
        lblWelcomeMessage = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtWelcomeMessage = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtBroadcastMessage = new javax.swing.JTextArea();
        lblBroadcastMessage = new javax.swing.JLabel();
        spnSpamTime = new javax.swing.JSpinner();
        lblSpamTime = new javax.swing.JLabel();
        chkSyncTimeWithServer = new javax.swing.JCheckBox();
        lblInertiaX = new javax.swing.JLabel();
        lblInertiaY = new javax.swing.JLabel();
        sldDebugLevel = new javax.swing.JSlider();
        lblDebugLevel = new javax.swing.JLabel();
        spnInertiaX = new javax.swing.JSpinner();
        spnInertiaY = new javax.swing.JSpinner();
        chkPrintScoreToConsole = new javax.swing.JCheckBox();
        chkAddTimestampToLog = new javax.swing.JCheckBox();
        tabFlags = new javax.swing.JPanel();
        chkFlagsOnBuildings = new javax.swing.JCheckBox();
        chkAntidoteFlags = new javax.swing.JCheckBox();
        lblGoodFlags = new javax.swing.JLabel();
        lblAgility = new javax.swing.JLabel();
        spnAgility = new javax.swing.JSpinner();
        spnCloaking = new javax.swing.JSpinner();
        lblCloaking = new javax.swing.JLabel();
        spnRapidFire = new javax.swing.JSpinner();
        lblRapiFire = new javax.swing.JLabel();
        spnGenocide = new javax.swing.JSpinner();
        lblGenocide = new javax.swing.JLabel();
        spnGuidedMissile = new javax.swing.JSpinner();
        lblGuidedMissile = new javax.swing.JLabel();
        spnInvisibleBullet = new javax.swing.JSpinner();
        lblInvisibleBullet = new javax.swing.JLabel();
        spnLaser = new javax.swing.JSpinner();
        lblLaser = new javax.swing.JLabel();
        spnMachineGun = new javax.swing.JSpinner();
        lblMachineGun = new javax.swing.JLabel();
        spnNarrow = new javax.swing.JSpinner();
        lblNarrow = new javax.swing.JLabel();
        spnOscillationOverthruster = new javax.swing.JSpinner();
        lblOscillationOverthruster = new javax.swing.JLabel();
        spnPhantomZone = new javax.swing.JSpinner();
        lblPhantomZone = new javax.swing.JLabel();
        spnQuickturn = new javax.swing.JSpinner();
        lblQuickTurn = new javax.swing.JLabel();
        spnSuperBullet = new javax.swing.JSpinner();
        lblSuperBullet = new javax.swing.JLabel();
        spnSeer = new javax.swing.JSpinner();
        lblSeer = new javax.swing.JLabel();
        spnSheild = new javax.swing.JSpinner();
        lblShield = new javax.swing.JLabel();
        spnSteamroller = new javax.swing.JSpinner();
        lblSteamroller = new javax.swing.JLabel();
        spnStealth = new javax.swing.JSpinner();
        lblStealth = new javax.swing.JLabel();
        spnShockwave = new javax.swing.JSpinner();
        lblShockwave = new javax.swing.JLabel();
        spnTiny = new javax.swing.JSpinner();
        lblTiny = new javax.swing.JLabel();
        spnTheif = new javax.swing.JSpinner();
        lblTheif = new javax.swing.JLabel();
        spnUseless = new javax.swing.JSpinner();
        lblUseless = new javax.swing.JLabel();
        spnHighSpeed = new javax.swing.JSpinner();
        lblHighSpeed = new javax.swing.JLabel();
        spnWings = new javax.swing.JSpinner();
        lblWings = new javax.swing.JLabel();
        chkAllBadflagsOn = new javax.swing.JCheckBox();
        lblBlindness = new javax.swing.JLabel();
        spnBlindness = new javax.swing.JSpinner();
        spnBouncy = new javax.swing.JSpinner();
        lblBouncy = new javax.swing.JLabel();
        spnColourBlindness = new javax.swing.JSpinner();
        lblColourBlindness = new javax.swing.JLabel();
        spnForwardOnly = new javax.swing.JSpinner();
        lblForwardOnly = new javax.swing.JLabel();
        spnJamming = new javax.swing.JSpinner();
        lblJamming = new javax.swing.JLabel();
        spnLeftTurnOnly = new javax.swing.JSpinner();
        lblLeftTurnOnly = new javax.swing.JLabel();
        spnMomentum = new javax.swing.JSpinner();
        lblMomentum = new javax.swing.JLabel();
        spnNoJumping = new javax.swing.JSpinner();
        lblNoJumping = new javax.swing.JLabel();
        spnObesity = new javax.swing.JSpinner();
        lblObesity = new javax.swing.JLabel();
        spnReverseControlls = new javax.swing.JSpinner();
        ReverseControlls = new javax.swing.JLabel();
        spnReverseOnly = new javax.swing.JSpinner();
        lblReverseOnly = new javax.swing.JLabel();
        spnRightTurnOnly = new javax.swing.JSpinner();
        lblRightTurnOnly = new javax.swing.JLabel();
        spnTriggerHappy = new javax.swing.JSpinner();
        lblTriggerHappy = new javax.swing.JLabel();
        spnWideAngle = new javax.swing.JSpinner();
        lblWideAngle = new javax.swing.JLabel();
        lblGoodFlags1 = new javax.swing.JLabel();
        chkAllGoodflagsOn = new javax.swing.JCheckBox();
        spnExtraFlags = new javax.swing.JSpinner();
        lblExtraFlags = new javax.swing.JLabel();
        spnNumberOfFlags = new javax.swing.JSpinner();
        lblNumberOfFlags = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnLaunchServer = new javax.swing.JButton();
        btnImportSettings = new javax.swing.JButton();
        btnExportSettings = new javax.swing.JButton();
        btnKillServer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BZFlag Server GUI");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        tabAllTabs.setAutoscrolls(true);

        tabGamePlay.setAutoscrolls(true);
        tabGamePlay.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cmbGameStyle.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Free for all", "Capture the flag", "Rabbit based on score", "Rabbit based on killer", "Rabbit random" }));
        cmbGameStyle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbGameStyleActionPerformed(evt);
            }
        });
        tabGamePlay.add(cmbGameStyle, new org.netbeans.lib.awtextra.AbsoluteConstraints(94, 17, -1, -1));

        lblGameStyle.setText("Game Style");
        tabGamePlay.add(lblGameStyle, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 22, -1, -1));

        lblMaxShots.setText("Max. Shots before reload");
        tabGamePlay.add(lblMaxShots, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 60, -1, -1));

        chkRicochet.setText("Allow shots to ricochet");
        chkRicochet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRicochetActionPerformed(evt);
            }
        });
        tabGamePlay.add(chkRicochet, new org.netbeans.lib.awtextra.AbsoluteConstraints(341, 17, -1, -1));

        chkJumping.setText("Allow jumping");
        chkJumping.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkJumpingActionPerformed(evt);
            }
        });
        tabGamePlay.add(chkJumping, new org.netbeans.lib.awtextra.AbsoluteConstraints(341, 40, -1, -1));

        chkSpanOnBuilding.setText("Spawn tanks on buildings");
        tabGamePlay.add(chkSpanOnBuilding, new org.netbeans.lib.awtextra.AbsoluteConstraints(341, 63, -1, -1));

        chkDieOnTeamKill.setSelected(true);
        chkDieOnTeamKill.setText("Die on team kill");
        tabGamePlay.add(chkDieOnTeamKill, new org.netbeans.lib.awtextra.AbsoluteConstraints(341, 86, -1, -1));

        lblMaxTeamKills.setText("Kick on percentage of team kills");
        tabGamePlay.add(lblMaxTeamKills, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 90, -1, -1));

        chkDisableBots.setText("Disable bots");
        tabGamePlay.add(chkDisableBots, new org.netbeans.lib.awtextra.AbsoluteConstraints(341, 109, -1, -1));

        lblMaxPlayerScore.setText("Max player score");
        tabGamePlay.add(lblMaxPlayerScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 120, -1, -1));

        lblMaxTeamScore.setText("Max team score");
        tabGamePlay.add(lblMaxTeamScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 150, -1, -1));

        lblGameTime.setText("Game time limit (in seconds)");
        tabGamePlay.add(lblGameTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 180, -1, -1));

        chkManuallyStartTimedGame.setText("Manually start timed game");
        tabGamePlay.add(chkManuallyStartTimedGame, new org.netbeans.lib.awtextra.AbsoluteConstraints(341, 132, -1, -1));

        chkAutoTeam.setSelected(true);
        chkAutoTeam.setText("Auto-team");
        tabGamePlay.add(chkAutoTeam, new org.netbeans.lib.awtextra.AbsoluteConstraints(341, 155, -1, -1));

        lblMaxPlayers.setText("Max number of players");
        tabGamePlay.add(lblMaxPlayers, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 210, -1, -1));

        spnMaxShots.setModel(new javax.swing.SpinnerNumberModel(5, 1, 50, 1));
        tabGamePlay.add(spnMaxShots, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        spnMaxTeamKills.setModel(new javax.swing.SpinnerNumberModel(32, 1, 100, 1));
        tabGamePlay.add(spnMaxTeamKills, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        spnMaxPlayerScore.setModel(new javax.swing.SpinnerNumberModel(100, 1, 1000, 1));
        tabGamePlay.add(spnMaxPlayerScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, -1));

        spnMaxTeamScore.setModel(new javax.swing.SpinnerNumberModel(250, 1, 2500, 1));
        tabGamePlay.add(spnMaxTeamScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));

        spnGameTime.setModel(new javax.swing.SpinnerNumberModel(3600, 60, 9999, 1));
        tabGamePlay.add(spnGameTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, -1, -1));

        spnMaxPlayers.setModel(new javax.swing.SpinnerNumberModel(12, 2, 50, 1));
        tabGamePlay.add(spnMaxPlayers, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, -1, -1));

        lblWorldSize.setText("World size");
        tabGamePlay.add(lblWorldSize, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 430, -1, -1));

        spnWorldSize.setModel(new javax.swing.SpinnerNumberModel(800, 10, 9990, 10));
        tabGamePlay.add(spnWorldSize, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, -1, -1));

        lblBuildingDensity.setText("Building density");
        tabGamePlay.add(lblBuildingDensity, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 400, -1, -1));

        spnBuildingDensity.setModel(new javax.swing.SpinnerNumberModel(5, 0, 10, 1));
        tabGamePlay.add(spnBuildingDensity, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, -1, -1));

        lblMap.setText("Map");
        tabGamePlay.add(lblMap, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, -1, -1));

        chkRandomWorld.setText("Generate random world");
        tabGamePlay.add(chkRandomWorld, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, -1, -1));
        tabGamePlay.add(cmbMaps, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 270, 210, -1));

        chkRandomHeightBuildings.setText("Buildings have random height");
        tabGamePlay.add(chkRandomHeightBuildings, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, -1, -1));

        chkRandomRotateObjects.setText("Randomly rotate world objects");
        tabGamePlay.add(chkRandomRotateObjects, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, -1, -1));

        chkAddTeleporters.setText("Add teleporters");
        tabGamePlay.add(chkAddTeleporters, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, -1, -1));
        tabGamePlay.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 240, 440, 10));

        passAdminPassword.setText("abcdef");
        passAdminPassword.setPreferredSize(new java.awt.Dimension(125, 28));
        tabGamePlay.add(passAdminPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 270, -1, -1));

        passConfirmAdminPassword.setText("abcdef");
        passConfirmAdminPassword.setPreferredSize(new java.awt.Dimension(125, 28));
        tabGamePlay.add(passConfirmAdminPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 300, -1, -1));

        lblAdminPassword.setText("Admin password");
        tabGamePlay.add(lblAdminPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 280, -1, -1));

        lblConfirmAdminPassword.setText("Confirm admin password");
        tabGamePlay.add(lblConfirmAdminPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 310, -1, -1));

        chkAnnounceTKToAdmins.setText("Announce team kills to admins");
        tabGamePlay.add(chkAnnounceTKToAdmins, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 420, -1, -1));

        txtPathToBadWords.setToolTipText("None is used if left blank");
        tabGamePlay.add(txtPathToBadWords, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 330, 130, -1));

        lblPathToBadWords.setText("Path to bad word file");
        tabGamePlay.add(lblPathToBadWords, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 340, -1, -1));

        chkFilterChat.setText("Filter chat");
        tabGamePlay.add(chkFilterChat, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 400, -1, -1));

        chkFilterChatSimple.setText("Filter chat simple");
        tabGamePlay.add(chkFilterChatSimple, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 380, -1, -1));

        chkFilterCallSigns.setText("Filter callsigns");
        tabGamePlay.add(chkFilterCallSigns, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 360, -1, -1));

        tabAllTabs.addTab("Game Play", tabGamePlay);

        tabServer.setAutoscrolls(true);
        tabServer.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        chkQuiteAfterOneGame.setText("Quit after one game");
        tabServer.add(chkQuiteAfterOneGame, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 340, -1, -1));

        txtPublicMessage.setText("Noo BZFlag Server");
        tabServer.add(txtPublicMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 208, -1));

        lblPublicMessage.setText("Public message");
        tabServer.add(lblPublicMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 30, -1, -1));

        lblPublicAddress.setText("Public address");
        tabServer.add(lblPublicAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 60, -1, -1));

        txtPublicAddress.setText("123.456.789.000:5154");
        tabServer.add(txtPublicAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        txtListeningPort.setText("5154");
        tabServer.add(txtListeningPort, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 58, -1));

        lblListeningPort.setText("Listening port");
        tabServer.add(lblListeningPort, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, -1, -1));

        chkMakeServerPrivate.setText("Private server");
        tabServer.add(chkMakeServerPrivate, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 360, -1, -1));

        lblListeningAddress.setText("Listening address (interface)");
        tabServer.add(lblListeningAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 120, -1, -1));

        txtListeningAddress.setToolTipText("Default is used if left blank");
        tabServer.add(txtListeningAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 129, -1));

        chkRequireUDP.setSelected(true);
        chkRequireUDP.setText("Require UDP");
        tabServer.add(chkRequireUDP, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 320, -1, -1));

        txtPathToPasswordDatabase.setToolTipText("None is used if left blank");
        tabServer.add(txtPathToPasswordDatabase, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 129, -1));

        lblPathToPasswordDatabase.setText("Path to password database");
        tabServer.add(lblPathToPasswordDatabase, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 150, -1, -1));

        txtPathToUserDatabase.setToolTipText("None is used if left blank");
        tabServer.add(txtPathToUserDatabase, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 129, -1));

        lblPathToUserDatabase.setText("Path to user database");
        tabServer.add(lblPathToUserDatabase, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 180, -1, -1));

        txtPathToGroupDatabase.setToolTipText("None is used if left blank");
        tabServer.add(txtPathToGroupDatabase, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 129, -1));

        lblPathToGroupDatabase.setText("Path to group database");
        tabServer.add(lblPathToGroupDatabase, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 210, -1, -1));

        lblRegisteredGroupName.setText("Registered group name");
        tabServer.add(lblRegisteredGroupName, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 240, -1, -1));

        txtRegisteredGroupName.setToolTipText("None is used if left blank");
        tabServer.add(txtRegisteredGroupName, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 129, -1));

        spnMaxIdleTime.setModel(new javax.swing.SpinnerNumberModel(300, 1, 999, 1));
        tabServer.add(spnMaxIdleTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 57, -1));

        lblMaxIdleTime.setText("Max idle time (seconds)");
        tabServer.add(lblMaxIdleTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 450, -1, 20));

        lblAdminAnnounceLag.setText("Admin annouce lag time (milliseconds)");
        tabServer.add(lblAdminAnnounceLag, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 480, -1, -1));

        spnAdminAnnounceLag.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));
        tabServer.add(spnAdminAnnounceLag, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 470, 57, -1));

        spnAnnounceLag.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));
        tabServer.add(spnAnnounceLag, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, 57, -1));

        lblAnnounceLag.setText("Annouce lag time (milliseconds)");
        tabServer.add(lblAnnounceLag, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 510, -1, -1));

        lblAnnounceLag1.setText("Kick player after this many lag warnings");
        tabServer.add(lblAnnounceLag1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 540, -1, -1));

        spnAnnounceLag1.setModel(new javax.swing.SpinnerNumberModel(3, 1, 999, 1));
        tabServer.add(spnAnnounceLag1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 530, 57, -1));

        lblPathToBanFile.setText("Path to ban file");
        tabServer.add(lblPathToBanFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 270, -1, -1));

        txtPathToBanFile.setToolTipText("None is used if left blank");
        tabServer.add(txtPathToBanFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 129, -1));

        txtBanAddresses.setToolTipText("<html>None is used if left blank.  <br />Use * as wild card for ranges.</html>");
        tabServer.add(txtBanAddresses, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 129, -1));

        lblBanAddresses.setText("Ban addresses");
        tabServer.add(lblBanAddresses, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 300, -1, -1));

        lblPathToPIDFile.setText("Path to PID file");
        tabServer.add(lblPathToPIDFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 330, -1, -1));

        txtPathToPIDFile.setToolTipText("None is used if left blank");
        tabServer.add(txtPathToPIDFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 129, -1));

        lblWelcomeMessage.setText("Server welcome message");
        tabServer.add(lblWelcomeMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, -1, -1));

        txtWelcomeMessage.setColumns(19);
        txtWelcomeMessage.setRows(5);
        txtWelcomeMessage.setText("This is a Noo BZflag server\nHave Fun and Play Nice");
        txtWelcomeMessage.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txtWelcomeMessage);

        tabServer.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 40, -1, 111));

        txtBroadcastMessage.setColumns(19);
        txtBroadcastMessage.setRows(5);
        txtBroadcastMessage.setText("Noo BZflag Server\nBZFlag is Fun");
        txtBroadcastMessage.setWrapStyleWord(true);
        jScrollPane2.setViewportView(txtBroadcastMessage);

        tabServer.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 190, -1, 111));

        lblBroadcastMessage.setText("Server broadcast message");
        tabServer.add(lblBroadcastMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 170, -1, -1));

        spnSpamTime.setModel(new javax.swing.SpinnerNumberModel(15, 1, 999, 1));
        tabServer.add(spnSpamTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 410, 57, -1));

        lblSpamTime.setText("Spam time (seconds)");
        tabServer.add(lblSpamTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 420, -1, -1));

        chkSyncTimeWithServer.setText("Sync time with server");
        tabServer.add(chkSyncTimeWithServer, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 380, -1, -1));

        lblInertiaX.setText("Inertia X");
        tabServer.add(lblInertiaX, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 360, -1, -1));

        lblInertiaY.setText("Inertia Y");
        tabServer.add(lblInertiaY, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 390, -1, -1));

        sldDebugLevel.setMajorTickSpacing(1);
        sldDebugLevel.setMaximum(4);
        sldDebugLevel.setPaintLabels(true);
        sldDebugLevel.setPaintTicks(true);
        sldDebugLevel.setSnapToTicks(true);
        tabServer.add(sldDebugLevel, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 450, 89, -1));

        lblDebugLevel.setText("Debug level");
        tabServer.add(lblDebugLevel, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 470, -1, -1));

        spnInertiaX.setModel(new javax.swing.SpinnerNumberModel(50, 0, 999, 1));
        tabServer.add(spnInertiaX, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, -1, -1));

        spnInertiaY.setModel(new javax.swing.SpinnerNumberModel(50, 0, 999, 1));
        tabServer.add(spnInertiaY, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 380, -1, -1));

        chkPrintScoreToConsole.setText("Print score to console");
        tabServer.add(chkPrintScoreToConsole, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 400, -1, -1));

        chkAddTimestampToLog.setText("Add timestamps to log");
        tabServer.add(chkAddTimestampToLog, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 420, -1, -1));

        tabAllTabs.addTab("Server", tabServer);

        tabFlags.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        chkFlagsOnBuildings.setText("Flags on buildings");
        tabFlags.add(chkFlagsOnBuildings, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 470, -1, -1));

        chkAntidoteFlags.setText("Antidote flags");
        tabFlags.add(chkAntidoteFlags, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 450, -1, -1));

        lblGoodFlags.setText("Bad Flags");
        tabFlags.add(lblGoodFlags, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 20, -1, -1));

        lblAgility.setText("Agility");
        tabFlags.add(lblAgility, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 50, -1, -1));

        spnAgility.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnAgility.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnAgility, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        spnCloaking.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnCloaking.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnCloaking, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        lblCloaking.setText("Cloaking");
        tabFlags.add(lblCloaking, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 80, -1, -1));

        spnRapidFire.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnRapidFire.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnRapidFire, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        lblRapiFire.setText("Rapid fire");
        tabFlags.add(lblRapiFire, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 110, -1, -1));

        spnGenocide.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnGenocide.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnGenocide, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, -1));

        lblGenocide.setText("Genocide");
        tabFlags.add(lblGenocide, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, -1, -1));

        spnGuidedMissile.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnGuidedMissile.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnGuidedMissile, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, -1));

        lblGuidedMissile.setText("Guided missile");
        tabFlags.add(lblGuidedMissile, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 170, -1, -1));

        spnInvisibleBullet.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnInvisibleBullet.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnInvisibleBullet, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, -1));

        lblInvisibleBullet.setText("Invisible bullet");
        tabFlags.add(lblInvisibleBullet, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 200, -1, -1));

        spnLaser.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnLaser.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnLaser, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, -1));

        lblLaser.setText("Laser");
        tabFlags.add(lblLaser, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 230, -1, -1));

        spnMachineGun.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnMachineGun.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnMachineGun, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, -1, -1));

        lblMachineGun.setText("Machine gun");
        tabFlags.add(lblMachineGun, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 260, -1, -1));

        spnNarrow.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnNarrow.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnNarrow, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, -1, -1));

        lblNarrow.setText("Narrow");
        tabFlags.add(lblNarrow, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 290, -1, -1));

        spnOscillationOverthruster.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnOscillationOverthruster.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnOscillationOverthruster, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, -1, -1));

        lblOscillationOverthruster.setText("Oscillation Overthruster");
        tabFlags.add(lblOscillationOverthruster, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 320, -1, -1));

        spnPhantomZone.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnPhantomZone.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnPhantomZone, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, -1, -1));

        lblPhantomZone.setText("Phantom zone");
        tabFlags.add(lblPhantomZone, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 350, -1, -1));

        spnQuickturn.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnQuickturn.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnQuickturn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, -1, -1));

        lblQuickTurn.setText("Quick turn");
        tabFlags.add(lblQuickTurn, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 380, -1, -1));

        spnSuperBullet.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnSuperBullet.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnSuperBullet, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 400, -1, -1));

        lblSuperBullet.setText("Super bullet");
        tabFlags.add(lblSuperBullet, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 410, -1, -1));

        spnSeer.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnSeer.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnSeer, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 430, -1, -1));

        lblSeer.setText("Seer");
        tabFlags.add(lblSeer, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 440, -1, -1));

        spnSheild.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnSheild.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnSheild, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 460, -1, -1));

        lblShield.setText("Shield");
        tabFlags.add(lblShield, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 470, -1, -1));

        spnSteamroller.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnSteamroller.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnSteamroller, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 490, -1, -1));

        lblSteamroller.setText("Steamroller");
        tabFlags.add(lblSteamroller, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 500, -1, -1));

        spnStealth.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnStealth.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnStealth, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 520, -1, -1));

        lblStealth.setText("Stealth");
        tabFlags.add(lblStealth, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 530, -1, -1));

        spnShockwave.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnShockwave.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnShockwave, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, -1, -1));

        lblShockwave.setText("Shockwave");
        tabFlags.add(lblShockwave, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 50, -1, -1));

        spnTiny.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnTiny.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnTiny, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 70, -1, -1));

        lblTiny.setText("Tiny");
        tabFlags.add(lblTiny, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 80, -1, -1));

        spnTheif.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnTheif.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnTheif, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 100, -1, -1));

        lblTheif.setText("Theif");
        tabFlags.add(lblTheif, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 110, -1, -1));

        spnUseless.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnUseless.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnUseless, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 130, -1, -1));

        lblUseless.setText("Useless");
        tabFlags.add(lblUseless, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 140, -1, -1));

        spnHighSpeed.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnHighSpeed.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnHighSpeed, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 160, -1, -1));

        lblHighSpeed.setText("High speed");
        tabFlags.add(lblHighSpeed, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 170, -1, -1));

        spnWings.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnWings.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnWings, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 190, -1, -1));

        lblWings.setText("Wings");
        tabFlags.add(lblWings, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 200, -1, -1));

        chkAllBadflagsOn.setSelected(true);
        chkAllBadflagsOn.setText("All bad flags on");
        tabFlags.add(chkAllBadflagsOn, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 460, -1, -1));

        lblBlindness.setText("Blindness");
        tabFlags.add(lblBlindness, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 50, -1, -1));

        spnBlindness.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnBlindness.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnBlindness, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 40, -1, -1));

        spnBouncy.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnBouncy.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnBouncy, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 70, -1, -1));

        lblBouncy.setText("Bouncy");
        tabFlags.add(lblBouncy, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 80, -1, -1));

        spnColourBlindness.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnColourBlindness.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnColourBlindness, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 100, -1, -1));

        lblColourBlindness.setText("Colour blindness");
        tabFlags.add(lblColourBlindness, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 110, -1, -1));

        spnForwardOnly.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnForwardOnly.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnForwardOnly, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 130, -1, -1));

        lblForwardOnly.setText("Forward only");
        tabFlags.add(lblForwardOnly, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 140, -1, -1));

        spnJamming.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnJamming.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnJamming, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 160, -1, -1));

        lblJamming.setText("Jamming");
        tabFlags.add(lblJamming, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 170, -1, -1));

        spnLeftTurnOnly.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnLeftTurnOnly.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnLeftTurnOnly, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 190, -1, -1));

        lblLeftTurnOnly.setText("Left turn only");
        tabFlags.add(lblLeftTurnOnly, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 200, -1, -1));

        spnMomentum.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnMomentum.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnMomentum, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 220, -1, -1));

        lblMomentum.setText("Momentum");
        tabFlags.add(lblMomentum, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 230, -1, -1));

        spnNoJumping.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnNoJumping.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnNoJumping, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 250, -1, -1));

        lblNoJumping.setText("No jumping");
        tabFlags.add(lblNoJumping, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 260, -1, -1));

        spnObesity.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnObesity.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnObesity, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 280, -1, -1));

        lblObesity.setText("Obesity");
        tabFlags.add(lblObesity, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 290, -1, -1));

        spnReverseControlls.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnReverseControlls.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnReverseControlls, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 310, -1, -1));

        ReverseControlls.setText("Reverse controlls");
        tabFlags.add(ReverseControlls, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 320, -1, -1));

        spnReverseOnly.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnReverseOnly.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnReverseOnly, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 340, -1, -1));

        lblReverseOnly.setText("Reverse only");
        tabFlags.add(lblReverseOnly, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 350, -1, -1));

        spnRightTurnOnly.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnRightTurnOnly.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnRightTurnOnly, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 370, -1, -1));

        lblRightTurnOnly.setText("Right turn only");
        tabFlags.add(lblRightTurnOnly, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 380, -1, -1));

        spnTriggerHappy.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnTriggerHappy.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnTriggerHappy, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 400, -1, -1));

        lblTriggerHappy.setText("Trigger happy");
        tabFlags.add(lblTriggerHappy, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 410, -1, -1));

        spnWideAngle.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnWideAngle.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnWideAngle, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 430, -1, -1));

        lblWideAngle.setText("Wide angle");
        tabFlags.add(lblWideAngle, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 440, -1, -1));

        lblGoodFlags1.setText("Good Flags");
        tabFlags.add(lblGoodFlags1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, -1, -1));

        chkAllGoodflagsOn.setSelected(true);
        chkAllGoodflagsOn.setText("All good flags on");
        tabFlags.add(chkAllGoodflagsOn, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 220, -1, -1));

        spnExtraFlags.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnExtraFlags.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnExtraFlags, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 490, -1, -1));

        lblExtraFlags.setText("Extra flags");
        tabFlags.add(lblExtraFlags, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 500, -1, -1));

        spnNumberOfFlags.setModel(new javax.swing.SpinnerNumberModel(0, -1, 100, 1));
        spnNumberOfFlags.setToolTipText("<html>-1 is OFF<br />0 is ON<br />Positive numbers are ON WITH X SHOTS</html>");
        tabFlags.add(spnNumberOfFlags, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 520, -1, -1));

        lblNumberOfFlags.setText("Number of flags");
        tabFlags.add(lblNumberOfFlags, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 530, -1, -1));
        tabFlags.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 440, 160, -1));

        tabAllTabs.addTab("Flags", tabFlags);

        btnLaunchServer.setText("Launch Server");

        btnImportSettings.setText("Import settings");
        btnImportSettings.setEnabled(false);

        btnExportSettings.setText("Export settings");
        btnExportSettings.setEnabled(false);

        btnKillServer.setText("Kill Server");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(tabAllTabs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 620, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(btnImportSettings)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(btnExportSettings)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(btnKillServer)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(btnLaunchServer)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(tabAllTabs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 615, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnLaunchServer)
                    .add(btnImportSettings)
                    .add(btnExportSettings)
                    .add(btnKillServer))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chkJumpingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkJumpingActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_chkJumpingActionPerformed

    private void chkRicochetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRicochetActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_chkRicochetActionPerformed

    private void cmbGameStyleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbGameStyleActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_cmbGameStyleActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ReverseControlls;
    private javax.swing.JButton btnExportSettings;
    private javax.swing.JButton btnImportSettings;
    private javax.swing.JButton btnKillServer;
    private javax.swing.JButton btnLaunchServer;
    private javax.swing.JCheckBox chkAddTeleporters;
    private javax.swing.JCheckBox chkAddTimestampToLog;
    private javax.swing.JCheckBox chkAllBadflagsOn;
    private javax.swing.JCheckBox chkAllGoodflagsOn;
    private javax.swing.JCheckBox chkAnnounceTKToAdmins;
    private javax.swing.JCheckBox chkAntidoteFlags;
    private javax.swing.JCheckBox chkAutoTeam;
    private javax.swing.JCheckBox chkDieOnTeamKill;
    private javax.swing.JCheckBox chkDisableBots;
    private javax.swing.JCheckBox chkFilterCallSigns;
    private javax.swing.JCheckBox chkFilterChat;
    private javax.swing.JCheckBox chkFilterChatSimple;
    private javax.swing.JCheckBox chkFlagsOnBuildings;
    private javax.swing.JCheckBox chkJumping;
    private javax.swing.JCheckBox chkMakeServerPrivate;
    private javax.swing.JCheckBox chkManuallyStartTimedGame;
    private javax.swing.JCheckBox chkPrintScoreToConsole;
    private javax.swing.JCheckBox chkQuiteAfterOneGame;
    private javax.swing.JCheckBox chkRandomHeightBuildings;
    private javax.swing.JCheckBox chkRandomRotateObjects;
    private javax.swing.JCheckBox chkRandomWorld;
    private javax.swing.JCheckBox chkRequireUDP;
    private javax.swing.JCheckBox chkRicochet;
    private javax.swing.JCheckBox chkSpanOnBuilding;
    private javax.swing.JCheckBox chkSyncTimeWithServer;
    private javax.swing.JComboBox cmbGameStyle;
    private javax.swing.JComboBox cmbMaps;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblAdminAnnounceLag;
    private javax.swing.JLabel lblAdminPassword;
    private javax.swing.JLabel lblAgility;
    private javax.swing.JLabel lblAnnounceLag;
    private javax.swing.JLabel lblAnnounceLag1;
    private javax.swing.JLabel lblBanAddresses;
    private javax.swing.JLabel lblBlindness;
    private javax.swing.JLabel lblBouncy;
    private javax.swing.JLabel lblBroadcastMessage;
    private javax.swing.JLabel lblBuildingDensity;
    private javax.swing.JLabel lblCloaking;
    private javax.swing.JLabel lblColourBlindness;
    private javax.swing.JLabel lblConfirmAdminPassword;
    private javax.swing.JLabel lblDebugLevel;
    private javax.swing.JLabel lblExtraFlags;
    private javax.swing.JLabel lblForwardOnly;
    private javax.swing.JLabel lblGameStyle;
    private javax.swing.JLabel lblGameTime;
    private javax.swing.JLabel lblGenocide;
    private javax.swing.JLabel lblGoodFlags;
    private javax.swing.JLabel lblGoodFlags1;
    private javax.swing.JLabel lblGuidedMissile;
    private javax.swing.JLabel lblHighSpeed;
    private javax.swing.JLabel lblInertiaX;
    private javax.swing.JLabel lblInertiaY;
    private javax.swing.JLabel lblInvisibleBullet;
    private javax.swing.JLabel lblJamming;
    private javax.swing.JLabel lblLaser;
    private javax.swing.JLabel lblLeftTurnOnly;
    private javax.swing.JLabel lblListeningAddress;
    private javax.swing.JLabel lblListeningPort;
    private javax.swing.JLabel lblMachineGun;
    private javax.swing.JLabel lblMap;
    private javax.swing.JLabel lblMaxIdleTime;
    private javax.swing.JLabel lblMaxPlayerScore;
    private javax.swing.JLabel lblMaxPlayers;
    private javax.swing.JLabel lblMaxShots;
    private javax.swing.JLabel lblMaxTeamKills;
    private javax.swing.JLabel lblMaxTeamScore;
    private javax.swing.JLabel lblMomentum;
    private javax.swing.JLabel lblNarrow;
    private javax.swing.JLabel lblNoJumping;
    private javax.swing.JLabel lblNumberOfFlags;
    private javax.swing.JLabel lblObesity;
    private javax.swing.JLabel lblOscillationOverthruster;
    private javax.swing.JLabel lblPathToBadWords;
    private javax.swing.JLabel lblPathToBanFile;
    private javax.swing.JLabel lblPathToGroupDatabase;
    private javax.swing.JLabel lblPathToPIDFile;
    private javax.swing.JLabel lblPathToPasswordDatabase;
    private javax.swing.JLabel lblPathToUserDatabase;
    private javax.swing.JLabel lblPhantomZone;
    private javax.swing.JLabel lblPublicAddress;
    private javax.swing.JLabel lblPublicMessage;
    private javax.swing.JLabel lblQuickTurn;
    private javax.swing.JLabel lblRapiFire;
    private javax.swing.JLabel lblRegisteredGroupName;
    private javax.swing.JLabel lblReverseOnly;
    private javax.swing.JLabel lblRightTurnOnly;
    private javax.swing.JLabel lblSeer;
    private javax.swing.JLabel lblShield;
    private javax.swing.JLabel lblShockwave;
    private javax.swing.JLabel lblSpamTime;
    private javax.swing.JLabel lblStealth;
    private javax.swing.JLabel lblSteamroller;
    private javax.swing.JLabel lblSuperBullet;
    private javax.swing.JLabel lblTheif;
    private javax.swing.JLabel lblTiny;
    private javax.swing.JLabel lblTriggerHappy;
    private javax.swing.JLabel lblUseless;
    private javax.swing.JLabel lblWelcomeMessage;
    private javax.swing.JLabel lblWideAngle;
    private javax.swing.JLabel lblWings;
    private javax.swing.JLabel lblWorldSize;
    private javax.swing.JPasswordField passAdminPassword;
    private javax.swing.JPasswordField passConfirmAdminPassword;
    private javax.swing.JSlider sldDebugLevel;
    private javax.swing.JSpinner spnAdminAnnounceLag;
    private javax.swing.JSpinner spnAgility;
    private javax.swing.JSpinner spnAnnounceLag;
    private javax.swing.JSpinner spnAnnounceLag1;
    private javax.swing.JSpinner spnBlindness;
    private javax.swing.JSpinner spnBouncy;
    private javax.swing.JSpinner spnBuildingDensity;
    private javax.swing.JSpinner spnCloaking;
    private javax.swing.JSpinner spnColourBlindness;
    private javax.swing.JSpinner spnExtraFlags;
    private javax.swing.JSpinner spnForwardOnly;
    private javax.swing.JSpinner spnGameTime;
    private javax.swing.JSpinner spnGenocide;
    private javax.swing.JSpinner spnGuidedMissile;
    private javax.swing.JSpinner spnHighSpeed;
    private javax.swing.JSpinner spnInertiaX;
    private javax.swing.JSpinner spnInertiaY;
    private javax.swing.JSpinner spnInvisibleBullet;
    private javax.swing.JSpinner spnJamming;
    private javax.swing.JSpinner spnLaser;
    private javax.swing.JSpinner spnLeftTurnOnly;
    private javax.swing.JSpinner spnMachineGun;
    private javax.swing.JSpinner spnMaxIdleTime;
    private javax.swing.JSpinner spnMaxPlayerScore;
    private javax.swing.JSpinner spnMaxPlayers;
    private javax.swing.JSpinner spnMaxShots;
    private javax.swing.JSpinner spnMaxTeamKills;
    private javax.swing.JSpinner spnMaxTeamScore;
    private javax.swing.JSpinner spnMomentum;
    private javax.swing.JSpinner spnNarrow;
    private javax.swing.JSpinner spnNoJumping;
    private javax.swing.JSpinner spnNumberOfFlags;
    private javax.swing.JSpinner spnObesity;
    private javax.swing.JSpinner spnOscillationOverthruster;
    private javax.swing.JSpinner spnPhantomZone;
    private javax.swing.JSpinner spnQuickturn;
    private javax.swing.JSpinner spnRapidFire;
    private javax.swing.JSpinner spnReverseControlls;
    private javax.swing.JSpinner spnReverseOnly;
    private javax.swing.JSpinner spnRightTurnOnly;
    private javax.swing.JSpinner spnSeer;
    private javax.swing.JSpinner spnSheild;
    private javax.swing.JSpinner spnShockwave;
    private javax.swing.JSpinner spnSpamTime;
    private javax.swing.JSpinner spnStealth;
    private javax.swing.JSpinner spnSteamroller;
    private javax.swing.JSpinner spnSuperBullet;
    private javax.swing.JSpinner spnTheif;
    private javax.swing.JSpinner spnTiny;
    private javax.swing.JSpinner spnTriggerHappy;
    private javax.swing.JSpinner spnUseless;
    private javax.swing.JSpinner spnWideAngle;
    private javax.swing.JSpinner spnWings;
    private javax.swing.JSpinner spnWorldSize;
    private javax.swing.JTabbedPane tabAllTabs;
    private javax.swing.JPanel tabFlags;
    private javax.swing.JPanel tabGamePlay;
    private javax.swing.JPanel tabServer;
    private javax.swing.JTextField txtBanAddresses;
    private javax.swing.JTextArea txtBroadcastMessage;
    private javax.swing.JTextField txtListeningAddress;
    private javax.swing.JTextField txtListeningPort;
    private javax.swing.JTextField txtPathToBadWords;
    private javax.swing.JTextField txtPathToBanFile;
    private javax.swing.JTextField txtPathToGroupDatabase;
    private javax.swing.JTextField txtPathToPIDFile;
    private javax.swing.JTextField txtPathToPasswordDatabase;
    private javax.swing.JTextField txtPathToUserDatabase;
    private javax.swing.JTextField txtPublicAddress;
    private javax.swing.JTextField txtPublicMessage;
    private javax.swing.JTextField txtRegisteredGroupName;
    private javax.swing.JTextArea txtWelcomeMessage;
    // End of variables declaration//GEN-END:variables

}
